#################################################################
#
# Discriminative OTUs determined using ANCOM-BC2
#
#################################################################

# packages
library(TreeSummarizedExperiment)
library(SummarizedExperiment)
library(ANCOMBC)
library(readxl)
library(dplyr)
library(tidyverse)
library(xlsx)


# set the minimum prevalence and depth
min.prevalence = 0.1
min.depth = 50

# read in the data
data <- read_tsv(file = 'mothur/final.opti_mcc.shared')
metadata_file <- read_xlsx('data/metadata.xlsx')


# get the list of samples that remain following subsampling
# remove sampled that do not remain following subsampling
subsampled_names_upper <- read_tsv('mothur/final.opti_mcc_upper.0.03.subsample.shared') %>%
  dplyr::select(Group)

subsampled_names_lower <- read_tsv('mothur/final.opti_mcc_lower.0.03.subsample.shared') %>%
  dplyr::select(Group)


subsampled_names_list_upper <- subsampled_names_upper$Group
subsampled_names_list_lower <- subsampled_names_lower$Group
subsampled_names_list <- c(subsampled_names_list_upper, subsampled_names_list_lower)


# use subsampled name list to select only samples remaining after subsampling from data file
# & alter dataframe for downstream processing
select_data <- data %>% 
  filter(Group %in% subsampled_names_list) %>%
  dplyr::select(-label, -numOtus) %>%
  dplyr::select(which(colSums(. != 0)>=nrow(.)*min.prevalence)) %>%
  dplyr::select(where(~ any(.x >= min.depth)))


# change metadata column name to 'group'
metadata_file <- metadata_file %>%
  rename(group = `Sample Name`)

# remove standards, mocks, controls, etc from metadata 
metadata_removed <- metadata_file %>%
  filter(treatment != 'NA')

# # use subsampled names list generated earlier to obtain subsampled ID list
subsampled_id_list <- (metadata_removed %>% filter(sample_id %in% subsampled_names_list))$group

# use subsampled id list to select only samples remaining following subsampling from metadata file
metadata <- metadata_removed %>%
  dplyr::select(group, treatment, sample_date, Location, disease_stat) %>%
  dplyr::rename(date = sample_date) %>%
  dplyr::rename(site = Location) %>%
  filter(group %in% c(select_data$Group)) %>%
  group_by(date, site) %>%
  mutate(sampleid = group) %>%
  dplyr::rename(SampleID = 'group') %>%
  remove_rownames() %>%
  column_to_rownames(var = 'sampleid')

metadata_summary <- metadata %>%
  group_by(date, site, treatment) %>%
  summarise(n = n(), .groups = "drop")

# transpose the df
abundance_data <- select_data %>%
  remove_rownames() %>%
  column_to_rownames(var = 'Group') %>%
  t()

# create blank data frame to bind non-significant and significant results for each iteration of the forloops
all_results_t1_accum <- data.frame()
sig_results_t1_accum <- data.frame()

all_results_t2_accum <- data.frame()
sig_results_t2_accum <- data.frame()

all_results_t1 <- data.frame()
sig_results_t1 <- data.frame()

all_results_t2 <- data.frame()
sig_results_t2 <- data.frame()


# loop through each iteration of timepoint and GIT site, and perform ANCOM-BC2 analysis
# perform ancombc2 analysis between diet groups
# Control VS Treatments

for(date in unique(metadata$date)) {
  for( site in unique(metadata$site)) {
    
    if (date == '24th') {
      
      # create blank data frame to append results to later
      all_results_t1 <- data.frame()
      sig_results_t1 <- data.frame()
      
      # subset
      subset_metadata <- metadata[metadata$date == date & metadata$site == site, ]
      
      # order metadata alphabeticaaly so CTL is first so ancombc2 uses the first group as the control
      subset_metadata <- subset_metadata[with(subset_metadata, order(treatment)), ]
      
      # remove unwanted columns
      subset_metadata <- subset_metadata %>%
        dplyr::select(-date, -site, -disease_stat)

      # select samples we have subset for (above) from abundance data
      subset_abundance_data <- as.data.frame(abundance_data) %>%    # convert the matrix to a data frame
        dplyr::select(subset_metadata$SampleID)                     # use select() to remove the column
      subset_abundance_data <- as.matrix(subset_abundance_data)            # convert back to a matrix

      # create TreeSummarizedExperiment object
      tse <- TreeSummarizedExperiment(
        assays = list(counts = subset_abundance_data),
        colData = subset_metadata)

      methods <- list('none', 'BH', 'holm')     # set p_adj_method
      prvs <- list(0)                           # set prv_cut -- set to 0 if already set earlier
      alphas <- list(0.05)                      # set alpha

      for (method in methods) {
        for (prv in prvs) {
          for (alpha in alphas) {

            # ifelse statement to check how many treatment groups ar ein the current subset
            if (length(unique(subset_metadata$treatment)) >= 3) {
              pairwise_flag <- TRUE
              dunnet_flag <- TRUE
              global_flag <- FALSE
            } else {
              pairwise_flag <- FALSE
              dunnet_flag <- FALSE
              global_flag <- FALSE
            }
            
            # Perform ancombc2
            output <- ancombc2(data = tse, 
                               assay_name = "counts", 
                               fix_formula = "treatment", 
                               rand_formula = NULL,
                               p_adj_method = method, 
                               pseudo = 0, 
                               pseudo_sens = TRUE,
                               prv_cut = prv, 
                               lib_cut = 0, 
                               s0_perc = 0.05,
                               group = "treatment", 
                               struc_zero = TRUE, 
                               neg_lb = TRUE,
                               alpha = alpha, 
                               verbose = TRUE,
                               global = global_flag, 
                               pairwise = pairwise_flag, 
                               dunnet = dunnet_flag, 
                               trend = FALSE,
                               iter_control = list(tol = 1e-2, max_iter = 20, verbose = TRUE),
                               em_control = list(tol = 1e-5, max_iter = 100),
                               lme_control = lme4::lmerControl(),
                               mdfdr_control = list(fwer_ctrl_method = 'none', B = 100))

            # Structural zeros
            tab_zero <- output$zero_ind
            assign(paste0('Struc_zero_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLXOSvsGOS'), tab_zero, envir = .GlobalEnv)
            
            # Sensitivity scores
            tab_sens <- output$pseudo_sens_tab
            assign(paste0('Tab_sens_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLXOSvsGOS'), tab_sens, envir = .GlobalEnv)
            
            # ANCOM-BC2 primary analysis
            res_prim <- output$res %>%
              mutate(subset = paste0(date, '_', site)) %>%
              mutate(prv_cut = paste0(prv)) %>%
              mutate(alpha = paste0(alpha)) %>%
              mutate(p_adj_method = paste0(method)) %>%
              mutate(analysis = 'ancombc2') %>%
              mutate()
            
            assign(paste0('Non_sig_LFC_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLXOSvsGOS'), res_prim, envir = .GlobalEnv)
            
            # ANCOM-BC2 significant features
            sig_res_prim <- output$res %>%
              filter(diff_treatmentGOS == 'TRUE') %>%
              mutate(subset = paste0(date, '_', site)) %>%
              mutate(prv_cut = paste0(prv)) %>%
              mutate(alpha = paste0(alpha)) %>%
              mutate(p_adj_method = paste0(method)) %>%
              mutate(analysis = 'ancombc2')
            
            assign(paste0('Sig_LFC_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLXOSvsGOS'), sig_res_prim, envir = .GlobalEnv)

            # bind non-significant results for each iteration to a sindle dataframe that can be exported
            all_results_t1 <- rbind(all_results_t1, res_prim)
            
            # bind significant results for each iteration to a sindle dataframe that can be exported
            sig_results_t1 <- rbind(sig_results_t1, sig_res_prim)

          }
        }
      }
      
      all_results_t1_tidy <- all_results_t1 %>%
        rename(pval_gos = 'p_treatmentGOS') %>%
        rename(pval_gos_holm = 'q_treatmentGOS') %>%
        rename(effect_gos = 'lfc_treatmentGOS') %>%
        dplyr::select(taxon, pval_gos, pval_gos_holm, 
                      effect_gos, subset, prv_cut,
                      alpha, p_adj_method, analysis)
      
      all_results_t1_gos <- all_results_t1_tidy %>%
        dplyr::select(taxon, pval_gos, pval_gos_holm, effect_gos, subset, prv_cut,
                      alpha, p_adj_method, analysis) %>%
        rename(pval = 'pval_gos') %>%
        rename(pval_holm = 'pval_gos_holm') %>%
        rename(effect = 'effect_gos') %>%
        mutate(diet = 'gos') %>%
        mutate(pairwise = 'CTLXOS-GOS')
      
      sig_results_t1_gos <- all_results_t1_gos %>%
        filter(pval_holm < 0.05)
      
      all_results_t1_accum <- rbind(all_results_t1_accum, all_results_t1_gos)
      sig_results_t1_accum <- rbind(sig_results_t1_accum, sig_results_t1_gos)
      
      
    } else {
      
      # create blank data frames
      all_results_t2 <- data.frame()
      sig_results_t2 <- data.frame()
      
      # subset
      subset_metadata <- metadata[metadata$date == date & metadata$site == site, ]
      
      # order metadata alphabeticaaly so CTL is first so ancombc2 uses the first group as the control
      subset_metadata <- subset_metadata[with(subset_metadata, order(treatment)), ]
      
      # remove unwanted columns
      subset_metadata <- subset_metadata %>%
        dplyr::select(-date, -site, -disease_stat)

      # select samples we have subset for (above) from abundance data
      subset_abundance_data <- as.data.frame(abundance_data) %>%    # convert the matrix to a data frame
        dplyr::select(subset_metadata$SampleID)                     # use select() to remove the column
      subset_abundance_data <- as.matrix(subset_abundance_data)            # convert back to a matrix

      # Create TreeSummarizedExperiment object
      tse <- TreeSummarizedExperiment(
        assays = list(counts = subset_abundance_data),
        colData = subset_metadata)

      methods <- list('none', 'BH', 'holm')     # set p_adj_method
      prvs <- list(0)                           # set prv_cut -- set to 0 if already set earlier
      alphas <- list(0.05)                      # set alpha

      for (method in methods) {
        for (prv in prvs) {
          for (alpha in alphas) {
            
            # ifelse statement to check how many treatment groups ar ein the current subset
            if (length(unique(subset_metadata$treatment)) >= 3) {
              pairwise_flag <- TRUE
              dunnet_flag <- TRUE
              global_flag <- FALSE
            } else {
              pairwise_flag <- FALSE
              dunnet_flag <- FALSE
              global_flag <- FALSE
            }
            
            # Perform ancombc2
            output <- ancombc2(data = tse, 
                               assay_name = "counts", 
                               fix_formula = "treatment", 
                               rand_formula = NULL,
                               p_adj_method = method, 
                               pseudo = 0, 
                               pseudo_sens = TRUE,
                               prv_cut = prv, 
                               lib_cut = 0, 
                               s0_perc = 0.05,
                               group = "treatment", 
                               struc_zero = TRUE, 
                               neg_lb = TRUE,
                               alpha = alpha, 
                               verbose = TRUE,
                               global = global_flag, 
                               pairwise = pairwise_flag, 
                               dunnet = dunnet_flag, 
                               trend = FALSE,
                               iter_control = list(tol = 1e-2, max_iter = 20, verbose = TRUE),
                               em_control = list(tol = 1e-5, max_iter = 100),
                               lme_control = lme4::lmerControl(),
                               mdfdr_control = list(fwer_ctrl_method = 'none', B = 100))

            # Structural zeros
            tab_zero <- output$zero_ind
            assign(paste0('Struc_zero_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLvsGOS+XOS'), tab_zero, envir = .GlobalEnv)
            
            # Sensitivity scores
            tab_sens <- output$pseudo_sens_tab
            assign(paste0('Tab_sens_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLvsGOS+XOS'), tab_sens, envir = .GlobalEnv)
            
            # ANCOM-BC2 primary analysis
            res_prim <- output$res %>%
              mutate(subset = paste0(date, '_', site)) %>%
              mutate(prv_cut = paste0(prv)) %>%
              mutate(alpha = paste0(alpha)) %>%
              mutate(p_adj_method = paste0(method)) %>%
              mutate(analysis = 'ancombc2')
            
            assign(paste0('Non_sig_LFC_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLvsGOS+XOS'), res_prim, envir = .GlobalEnv)
            
            # ANCOM-BC2 significant features
            sig_res_prim <- output$res %>%
              filter(diff_treatmentGOS == 'TRUE' | diff_treatmentXOS == 'TRUE') %>%
              mutate(subset = paste0(date, '_', site)) %>%
              mutate(prv_cut = paste0(prv)) %>%
              mutate(alpha = paste0(alpha)) %>%
              mutate(p_adj_method = paste0(method)) %>%
              mutate(analysis = 'ancombc2')

            assign(paste0('Sig_LFC_', date, '_', site, '_prv=', prv, '_alpha=', alpha, '_', method, 'CTLvsGOS+XOS'), sig_res_prim, envir = .GlobalEnv)

            # bind non-significant results for each iteration to a sindle dataframe that can be exported
            all_results_t2 <- rbind(all_results_t2, res_prim)
            
            # bind significant results for each iteration to a sindle dataframe that can be exported
            sig_results_t2 <- rbind(sig_results_t2, sig_res_prim)

          }
        }
      }
      
      all_results_t2_tidy <- all_results_t2 %>%
        rename(pval_gos = 'p_treatmentGOS') %>%
        rename(pval_xos = 'p_treatmentXOS') %>%
        rename(pval_gos_holm = 'q_treatmentGOS') %>%
        rename(pval_xos_holm = 'q_treatmentXOS') %>%
        rename(effect_gos = 'lfc_treatmentGOS') %>%
        rename(effect_xos = 'lfc_treatmentXOS') %>%
        dplyr::select(taxon, pval_gos, pval_xos, pval_gos_holm, pval_xos_holm, 
                      effect_gos, effect_xos, subset, prv_cut,
                      alpha, p_adj_method, analysis)
      
      all_results_t2_gos <- all_results_t2_tidy %>%
        dplyr::select(taxon, pval_gos, pval_gos_holm, effect_gos, subset, prv_cut,
                      alpha, p_adj_method, analysis) %>%
        rename(pval = 'pval_gos') %>%
        rename(pval_holm = 'pval_gos_holm') %>%
        rename(effect = 'effect_gos') %>%
        mutate(diet = 'gos') %>%
        mutate(pairwise = 'CTL-GOS')
      
      all_results_t2_xos <- all_results_t2_tidy %>%
        dplyr::select(taxon, pval_xos, pval_xos_holm, effect_xos, subset, prv_cut,
                      alpha, p_adj_method, analysis) %>%
        rename(pval = 'pval_xos') %>%
        rename(pval_holm = 'pval_xos_holm') %>%
        rename(effect = 'effect_xos') %>%
        mutate(diet = 'xos') %>%
        mutate(pairwise = 'CTL-XOS')
      
      sig_results_t2_gos <- all_results_t2_gos %>%
        filter(pval_holm < 0.05)
      
      sig_results_t2_xos <- all_results_t2_xos %>%
        filter(pval_holm < 0.05)
      
      all_results_t2_accum <- rbind(all_results_t2_accum, all_results_t2_gos, all_results_t2_xos)
      sig_results_t2_accum <- rbind(sig_results_t2_accum, sig_results_t2_gos, sig_results_t2_xos)
      
    }
  }
}